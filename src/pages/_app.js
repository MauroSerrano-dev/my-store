import '@/styles/globals.css'
import Head from 'next/head'
import Script from 'next/script'
import { ThemeProvider, createTheme } from '@mui/material/styles';
import MontserratRegular from '../../public/fonts/montserrat.ttf';
import DataHandler from '@/components/DataHandler'
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { CircularProgress } from '@mui/material';
import { motion } from 'framer-motion';
import Maintenance from '@/components/Maintenance';
import { ToastContainer, Flip, toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css';

const primaryColor = '#1189C4'

const maintenance = false

const mainTheme = createTheme({
  palette: {
    primary: {
      main: primaryColor,
    },
    secondary: {
      main: '#e5e5e5'
    },
    neutral: {
      main: '#ffffff',
      contrastText: '#ffffff',
    },
  },
  typography: {
    fontFamily: [MontserratRegular, 'Arial', 'sans-serif',
    ].join(','),
  },
})

export default function App(props) {
  const { Component, pageProps } = props

  const [loading, setLoading] = useState(false)

  const router = useRouter()

  useEffect(() => {

    function handleLoading() {
      setLoading(true)
    }

    function handleEndLoading() {
      setLoading(false)
      toast.dismiss()
    }

    router.events.on("routeChangeStart", handleLoading)
    router.events.on("routeChangeComplete", handleEndLoading)
    router.events.on("routeChangeError", handleEndLoading)

    return () => {
      router.events.off("routeChangeStart", handleLoading)
      router.events.off("routeChangeComplete", handleEndLoading)
      router.events.off("routeChangeError", handleEndLoading)
    }
  }, [])

  return (
    <div>
      <Head>
        <title>MKJ Styles</title>
        <meta name="description" content="Generated by create next app" key='description' />
        <meta name="keywords" content="shop, t-shirt, store" key='keywords' />
        <meta name="viewport" content="width=device-width, initial-scale=1" key='viewport' />
        <meta name="referrer" content="no-referrer" key='referrer' />
        <meta name="theme-color" content={primaryColor} key='theme-color' />

        <meta property="fb:app_id" content={process.env.NEXT_PUBLIC_FACEBOOK_APP_ID} />

        <link rel="icon" href="/logo.ico" key='icon' />

        <Script src="https://js.stripe.com/v3/" async></Script>
        {process.env.NODE_ENV === 'production' &&
          <script
            strategy='afterInteractive'
            async
            src={`https://www.googletagmanager.com/gtag/js?id=${process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}`}
          />
        }
        {process.env.NODE_ENV === 'production' &&
          <script
            strategy='afterInteractive'
            dangerouslySetInnerHTML={{
              __html: `
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());
              gtag('config', '${process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID}', {
                page_path: window.location.pathname,
              });
              `,
            }}
          />
        }
      </Head>
      <ThemeProvider theme={mainTheme}>
        {maintenance
          ? <Maintenance></Maintenance>
          : <DataHandler
            pageProps={pageProps}
            Component={Component}
            router={router}
          />
        }
      </ThemeProvider>
      <ToastContainer newestOnTop transition={Flip} style={{ color: 'white' }} />
      {loading &&
        <div>
          <div
            style={{
              position: 'fixed',
              zIndex: 9999,
              top: 0,
              width: '100vw',
              height: '100vh',
            }}>
          </div>
          <motion.div
            variants={{
              hidden: {
                opacity: 0,
              },
              visible: {
                opacity: 1,
                transition: {
                  duration: 0,
                  delay: 0.2,
                }
              }
            }}
            initial='hidden'
            animate='visible'
            style={{
              position: 'fixed',
              right: '4rem',
              bottom: '4rem',
              zIndex: 10000,
            }}
          >
            <CircularProgress
              variant="determinate"
              sx={{
                position: 'absolute',
                color: '#525252',
              }}
              size={40}
              thickness={4}
              value={100}
            />
            <CircularProgress
              disableShrink
              size={40}
              thickness={4}
              sx={{
                position: 'absolute',
                animationDuration: '750ms',
              }}
            />
          </motion.div>
        </div>
      }
    </div>
  )
}